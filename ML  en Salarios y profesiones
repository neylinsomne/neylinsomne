{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMFyB6uvYY4c+HksfcDr1VK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/neylinsomne/neylinsomne/blob/main/ML%20%20en%20Salarios%20y%20profesiones\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**PROYECTO 3**\n",
        "**Universidad**: Pontificia Universidad Javeriana\\\n",
        "**Profesor**: Enrique Gonzalez Guerrero\\\n",
        "**Nombres**:     \n",
        "\n",
        "\n",
        ">Neyl Peñuela\n",
        "\n",
        ">\n",
        "\n",
        ">\n",
        "\n",
        "**Carrera**:     Ciencia de Datos\\\n",
        "**Materia**:    Introducción a IA\\\n",
        "**Fecha:**    Noviembre del 2023 \\\n"
      ],
      "metadata": {
        "id": "ZMmThrgf1wlW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Base de datos usada:https://www.kaggle.com/datasets/sinhasatwik/salary-base-data/"
      ],
      "metadata": {
        "id": "g7vULUAuP3Wn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Instalación de PySpark\n",
        "!pip install pyspark\n",
        "\n",
        "# Configuración de PySpark\n",
        "from pyspark.sql import SparkSession\n",
        "\n",
        "# Crear una sesión de Spark\n",
        "spark = SparkSession.builder.master(\"local[*]\").getOrCreate()\n",
        "\n",
        "# Comprobar si PySpark se ha configurado correctamente\n",
        "spark\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 259
        },
        "id": "SM4DGewBNH-k",
        "outputId": "d18f0853-d18b-4521-bd57-dcaf4290fe1c"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pyspark in /usr/local/lib/python3.10/dist-packages (3.5.0)\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pyspark.sql.session.SparkSession at 0x7966f5bd42e0>"
            ],
            "text/html": [
              "\n",
              "            <div>\n",
              "                <p><b>SparkSession - in-memory</b></p>\n",
              "                \n",
              "        <div>\n",
              "            <p><b>SparkContext</b></p>\n",
              "\n",
              "            <p><a href=\"http://d7bbaf966453:4040\">Spark UI</a></p>\n",
              "\n",
              "            <dl>\n",
              "              <dt>Version</dt>\n",
              "                <dd><code>v3.5.0</code></dd>\n",
              "              <dt>Master</dt>\n",
              "                <dd><code>local[*]</code></dd>\n",
              "              <dt>AppName</dt>\n",
              "                <dd><code>pyspark-shell</code></dd>\n",
              "            </dl>\n",
              "        </div>\n",
              "        \n",
              "            </div>\n",
              "        "
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 123,
      "metadata": {
        "id": "LYBlZOXqz3BN"
      },
      "outputs": [],
      "source": [
        "import pyspark\n",
        "from pyspark.context import SparkContext\n",
        "from pyspark.sql.session import SparkSession\n",
        "from pyspark.sql.types import IntegerType, FloatType\n",
        "from pyspark.sql.functions import count, when, col\n",
        "from pyspark.ml.feature import StringIndexer\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Preparación Base de datos***"
      ],
      "metadata": {
        "id": "aCLrNl86ua-v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#se crea la session spark para poder usar todas las herramientas que nos ofrece esta API:\n",
        "spark = SparkSession.builder.appName(\"Ejemplo\").getOrCreate()"
      ],
      "metadata": {
        "id": "OBdyFbuIO7lz"
      },
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/Salary_Data.csv\")\n",
        "dfs=spark.createDataFrame(df)"
      ],
      "metadata": {
        "id": "C3bseOqn1rwt"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfs.printSchema()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "sax5cqxZOfZ2",
        "outputId": "224c6ff3-cb15-4969-8985-a78ce35e6910"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- Age: double (nullable = true)\n",
            " |-- Gender: string (nullable = true)\n",
            " |-- Education Level: string (nullable = true)\n",
            " |-- Job Title: string (nullable = true)\n",
            " |-- Years of Experience: double (nullable = true)\n",
            " |-- Salary: double (nullable = true)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "6kACBNBA1r8D",
        "outputId": "272201a9-5147-4708-cd9d-cc827d3145d9"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6704 entries, 0 to 6703\n",
            "Data columns (total 6 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   Age                  6702 non-null   float64\n",
            " 1   Gender               6702 non-null   object \n",
            " 2   Education Level      6701 non-null   object \n",
            " 3   Job Title            6702 non-null   object \n",
            " 4   Years of Experience  6701 non-null   float64\n",
            " 5   Salary               6699 non-null   float64\n",
            "dtypes: float64(3), object(3)\n",
            "memory usage: 314.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql.functions import avg\n",
        "\n",
        "# Agrupar por la columna \"Job Title\" y calcular el salario promedio\n",
        "df_promedio_salario = dfs.groupBy(\"Job Title\").agg(avg(\"Salary\").alias(\"SalarioPromedio\"))\n",
        "\n",
        "# Ordenar en orden descendente y tomar los 10 primeros\n",
        "df_top_10_salarios = df_promedio_salario.orderBy(\"SalarioPromedio\", ascending=False).limit(10)\n",
        "\n",
        "# Mostrar el resultado\n",
        "df_top_10_salarios.show(truncate=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "1SHVqnrV_QjL",
        "outputId": "0ae70d3e-733d-4add-fe38-fc2a5fc23d2c"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------------------+------------------+\n",
            "|Job Title               |SalarioPromedio   |\n",
            "+------------------------+------------------+\n",
            "|Sales Director          |NaN               |\n",
            "|NaN                     |NaN               |\n",
            "|Full Stack Engineer     |NaN               |\n",
            "|Social M                |NaN               |\n",
            "|Chief Technology Officer|250000.0          |\n",
            "|CEO                     |250000.0          |\n",
            "|Chief Data Officer      |220000.0          |\n",
            "|Director of Data Science|204561.40350877194|\n",
            "|VP of Finance           |200000.0          |\n",
            "|Director                |200000.0          |\n",
            "+------------------------+------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql.functions import lower\n",
        "\n",
        "# Filtrar el DataFrame para las profesiones que contienen la palabra \"data\"\n",
        "df_data_salarios = dfs.filter(lower(col(\"Job Title\")).like(\"%data%\")).groupBy(\"Job Title\").agg(avg(\"Salary\").alias(\"SalarioPromedio\"))\n",
        "\n",
        "# Mostrar el resultado\n",
        "df_data_salarios.show(truncate=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "vOvlQRdT_yDN",
        "outputId": "4063024c-6ee3-4ac6-afa2-cc5db0b393cb"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------------------+------------------+\n",
            "|Job Title               |SalarioPromedio   |\n",
            "+------------------------+------------------+\n",
            "|Data Entry Clerk        |35000.0           |\n",
            "|Chief Data Officer      |220000.0          |\n",
            "|Director of Data Science|204561.40350877194|\n",
            "|Data Scientist          |166105.96026490067|\n",
            "|Data Analyst            |125090.90909090909|\n",
            "|Senior Data Analyst     |155000.0          |\n",
            "|Senior Data Scientist   |151147.54098360657|\n",
            "|Junior Data Scientist   |45000.0           |\n",
            "|Junior Data Analyst     |51360.0           |\n",
            "|Senior Data Engineer    |155000.0          |\n",
            "+------------------------+------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conteo de datos nulos"
      ],
      "metadata": {
        "id": "rQDsgIEgVVPk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql.functions import count, when, col\n",
        "\n",
        "#Funcion para contar los nulos de un dataframe\n",
        "def conteo_nulos():\n",
        "    conteo = dfs.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns])\n",
        "\n",
        "    tabla = conteo.toPandas()\n",
        "\n",
        "    #Para que al imprimir la tabla, la muestre completa\n",
        "    pd.set_option(\"display.max_rows\", None)\n",
        "    pd.set_option(\"display.max_columns\", None)\n",
        "\n",
        "    print(tabla)\n",
        "\n",
        "conteo_nulos()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "55vpr6gDOEMT",
        "outputId": "ddf71774-791c-46f5-ab1e-80bca41fe7b5"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Age  Gender  Education Level  Job Title  Years of Experience  Salary\n",
            "0    0       0                0          0                    0       0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Encontramos que no hay ningún valor nulo"
      ],
      "metadata": {
        "id": "CDQlKo2_iicX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dfs.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "SnWOyji2Pvsp",
        "outputId": "f084ad79-8307-4732-eda9-b6ff578671a8"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+------+---------------+--------------------+-------------------+--------+\n",
            "| Age|Gender|Education Level|           Job Title|Years of Experience|  Salary|\n",
            "+----+------+---------------+--------------------+-------------------+--------+\n",
            "|32.0|  Male|     Bachelor's|   Software Engineer|                5.0| 90000.0|\n",
            "|28.0|Female|       Master's|        Data Analyst|                3.0| 65000.0|\n",
            "|45.0|  Male|            PhD|      Senior Manager|               15.0|150000.0|\n",
            "|36.0|Female|     Bachelor's|     Sales Associate|                7.0| 60000.0|\n",
            "|52.0|  Male|       Master's|            Director|               20.0|200000.0|\n",
            "|29.0|  Male|     Bachelor's|   Marketing Analyst|                2.0| 55000.0|\n",
            "|42.0|Female|       Master's|     Product Manager|               12.0|120000.0|\n",
            "|31.0|  Male|     Bachelor's|       Sales Manager|                4.0| 80000.0|\n",
            "|26.0|Female|     Bachelor's|Marketing Coordin...|                1.0| 45000.0|\n",
            "|38.0|  Male|            PhD|    Senior Scientist|               10.0|110000.0|\n",
            "|29.0|  Male|       Master's|  Software Developer|                3.0| 75000.0|\n",
            "|48.0|Female|     Bachelor's|          HR Manager|               18.0|140000.0|\n",
            "|35.0|  Male|     Bachelor's|   Financial Analyst|                6.0| 65000.0|\n",
            "|40.0|Female|       Master's|     Project Manager|               14.0|130000.0|\n",
            "|27.0|  Male|     Bachelor's|Customer Service Rep|                2.0| 40000.0|\n",
            "|44.0|  Male|     Bachelor's|  Operations Manager|               16.0|125000.0|\n",
            "|33.0|Female|       Master's|   Marketing Manager|                7.0| 90000.0|\n",
            "|39.0|  Male|            PhD|     Senior Engineer|               12.0|115000.0|\n",
            "|25.0|Female|     Bachelor's|    Data Entry Clerk|                0.0| 35000.0|\n",
            "|51.0|  Male|     Bachelor's|      Sales Director|               22.0|180000.0|\n",
            "+----+------+---------------+--------------------+-------------------+--------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "duplicados = dfs.count() - dfs.dropDuplicates().count()\n",
        "porcentaje=(duplicados/dfs.count())*100\n",
        "print(\"Número de filas duplicadas:\", duplicados,\" \\n lo cual representa el %\", porcentaje, \" de todo el dataframe.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "MyXHYpIHPwbk",
        "outputId": "27b5d2e2-2352-45ff-adf9-7346c76985d8"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de filas duplicadas: 4912  \n",
            " lo cual representa el % 73.26968973747017  de todo el dataframe.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este momento encontramos que hay bastantes filas duplicadas y con ello podemos encontrar varías problemáticas con respecto al adentrarnos al entrenamiento"
      ],
      "metadata": {
        "id": "28GDOKyLQYbQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Supongamos que tu DataFrame se llama df\n",
        "dfs = dfs.drop_duplicates()\n"
      ],
      "metadata": {
        "id": "pcVU2oKnROTM"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfs.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "4SDyP9oQjo3M",
        "outputId": "b310eb0e-56ec-4039-8957-8ef58884b640"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1792"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se indexan (se transforman a manera numérica"
      ],
      "metadata": {
        "id": "wqwNiyKMy8EP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dfs.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "A290myq_pSIg",
        "outputId": "186b8a1d-2dff-4ed0-d2c9-e6188e9a2db1"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+------+-----------------+--------------------+-------------------+--------+\n",
            "| Age|Gender|  Education Level|           Job Title|Years of Experience|  Salary|\n",
            "+----+------+-----------------+--------------------+-------------------+--------+\n",
            "|32.0|  Male|       Bachelor's|     Product Manager|                7.0|170000.0|\n",
            "|47.0|  Male|         Master's|Director of Opera...|               19.0|170000.0|\n",
            "|26.0|Female|  Master's Degree|  Back end Developer|                2.0| 70000.0|\n",
            "|47.0|  Male|              PhD|Software Engineer...|               14.0|175000.0|\n",
            "|34.0|  Male|Bachelor's Degree| Front end Developer|                5.0| 95000.0|\n",
            "|36.0|  Male|Bachelor's Degree| Front end Developer|               12.0|137878.0|\n",
            "|36.0|  Male|       Bachelor's|       Sales Manager|                9.0| 95000.0|\n",
            "|29.0|Female|       Bachelor's|    Junior Recruiter|                3.0| 45000.0|\n",
            "|37.0|  Male|  Master's Degree|Senior Project En...|                9.0|145000.0|\n",
            "|28.0|Female|  Master's Degree|Senior Software E...|                5.0| 99747.0|\n",
            "|34.0|Female|         Master's|         UX Designer|                5.0| 80000.0|\n",
            "|30.0|  Male|       Bachelor's|    Network Engineer|                3.0| 60000.0|\n",
            "|49.0|  Male|              PhD|Senior Project En...|               15.0|185000.0|\n",
            "|47.0|  Male|              PhD|Senior Project En...|               16.0|190000.0|\n",
            "|28.0|Female|Bachelor's Degree|   Software Engineer|                4.0| 70000.0|\n",
            "|24.0|  Male|Bachelor's Degree|  Back end Developer|                1.0| 55000.0|\n",
            "|30.0|  Male|Bachelor's Degree|  Back end Developer|                4.0| 95000.0|\n",
            "|35.0|Female|  Master's Degree| Full Stack Engineer|               10.0|152039.0|\n",
            "|26.0|  Male|  Master's Degree| Full Stack Engineer|                3.0| 68472.0|\n",
            "|44.0|Female|  Master's Degree|Senior Project En...|               12.0|170000.0|\n",
            "+----+------+-----------------+--------------------+-------------------+--------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como se muestra acá el genero Male se cambió a un 0, y el Female 1"
      ],
      "metadata": {
        "id": "D8SPROhYr9po"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dfs = dfs.na.drop()\n",
        "#se encontraron valores con Nan, asi que se eliminana"
      ],
      "metadata": {
        "id": "I61GYFIHtdgV"
      },
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "unique_job_titles = [row[\"Job Title\"] for row in dfs.select(\"Job Title\").distinct().collect()]\n",
        "\n",
        "# Mostrar la lista de valores únicos\n",
        "print(unique_job_titles)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "R9nLKqyl0FSJ",
        "outputId": "94e654e7-9b7f-44e4-f772-5693ff60fd5a"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Digital Marketing Manager', 'Product Designer', 'Senior Sales Manager', 'Senior Software Architect', 'Financial Manager', 'Event Coordinator', 'Financial Analyst', 'Senior Product Marketing Manager', 'Business Intelligence Analyst', 'Junior Software Engineer', 'Senior IT Consultant', 'Sales Executive', 'Senior Researcher', 'Senior Project Engineer', 'Network Engineer', 'Sales Associate', 'Public Relations Manager', 'Junior Business Analyst', 'Junior Customer Support Specialist', 'VP of Operations', 'Junior Operations Analyst', 'Junior Developer', 'UX Designer', 'Senior Marketing Manager', 'Senior Account Executive', 'Director', 'Marketing Manager', 'Project Manager', 'Junior Social Media Manager', 'Senior Software Developer', 'Marketing Coordinator', 'Data Entry Clerk', 'Senior Account Manager', 'Junior Advertising Coordinator', 'Senior Human Resources Coordinator', 'Principal Scientist', 'Graphic Designer', 'Customer Success Manager', 'Senior Sales Representative', 'Junior Business Operations Analyst', 'Chief Data Officer', 'Junior Financial Advisor', 'Junior Accountant', 'Senior Operations Manager', 'Director of Human Capital', 'Junior Software Developer', 'Senior Research Scientist', 'Senior Graphic Designer', 'Junior HR Coordinator', 'Web Developer', 'Marketing Specialist', 'HR Generalist', 'Senior Product Manager', 'Director of Finance', 'Junior Social Media Specialist', 'Developer', 'Director of Operations', 'Content Marketing Manager', 'HR Manager', 'Customer Service Manager', 'Senior Consultant', 'Customer Service Representative', 'Junior Web Developer', 'Senior Product Designer', 'Social Media Specialist', 'Social Media Manager', 'Office Manager', 'Senior Product Development Manager', 'Front end Developer', 'UX Researcher', 'Director of Product Management', 'Director of HR', 'Junior Marketing Manager', 'Director of Business Development', 'Software Manager', 'Back end Developer', 'Technical Recruiter', 'Director of Data Science', 'Sales Representative', 'Sales Director', 'VP of Finance', 'Director of Human Resources', 'Senior Scientist', 'Junior Designer', 'Product Marketing Manager', 'Project Engineer', 'Junior Marketing Coordinator', 'Training Specialist', 'Junior HR Generalist', 'Senior Training Specialist', 'Technical Writer', 'Recruiter', 'Junior Operations Manager', 'Junior Business Development Associate', 'Junior Project Manager', 'CEO', 'Research Scientist', 'Business Analyst', 'Software Engineer Manager', 'Senior Engineer', 'IT Manager', 'Senior HR Manager', 'Supply Chain Analyst', 'Senior HR Generalist', 'Senior UX Designer', 'Senior Financial Advisor', 'Data Scientist', 'Operations Analyst', 'Data Analyst', 'Technical Support Specialist', 'Junior Marketing Specialist', 'Junior Web Designer', 'Junior Financial Analyst', 'Human Resources Director', 'Senior Accountant', 'Senior Quality Assurance Analyst', 'Junior UX Designer', 'Junior Operations Coordinator', 'Director of Engineering', 'Senior Financial Analyst', 'Director of Sales', 'Senior Marketing Coordinator', 'Sales Manager', 'Senior Operations Coordinator', 'Operations Director', 'Senior Financial Manager', 'Marketing Analyst', 'Senior Human Resources Manager', 'Senior Human Resources Specialist', 'IT Support Specialist', 'Software Developer', 'Senior Business Analyst', 'Full Stack Engineer', 'Junior Product Manager', 'IT Support', 'Director of Sales and Marketing', 'Junior Sales Representative', 'Junior Marketing Analyst', 'Junior Copywriter', 'Senior Data Analyst', 'Front End Developer', 'Senior Marketing Director', 'Senior Operations Analyst', 'Senior IT Support Specialist', 'Accountant', 'Director of Marketing', 'Senior Software Engineer', 'Senior Data Scientist', 'Sales Operations Manager', 'Junior Data Scientist', 'Senior Business Development Manager', 'Junior Data Analyst', 'Senior Project Manager', 'Senior Marketing Specialist', 'Creative Director', 'Help Desk Analyst', 'Customer Service Rep', 'Senior Marketing Analyst', 'Operations Manager', 'Customer Success Rep', 'Supply Chain Manager', 'Principal Engineer', 'Senior Project Coordinator', 'Software Project Manager', 'Research Director', 'Business Development Manager', 'Strategy Consultant', 'Senior Data Engineer', 'Account Manager', 'Financial Advisor', 'Senior HR Specialist', 'Software Engineer', 'Copywriter', 'Senior Manager', 'Digital Content Producer', 'Junior Recruiter', 'Junior Account Manager', 'Chief Technology Officer', 'Product Manager', 'Administrative Assistant', 'Senior IT Project Manager', 'Junior Research Scientist', 'Digital Marketing Specialist', 'Receptionist', 'Social Media Man', 'Juniour HR Generalist', 'Human Resources Coordinator', 'Delivery Driver', 'Marketing Director', 'Junior Sales Associate', 'Juniour HR Coordinator', 'Human Resources Manager']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def map_job_to_group(job_title):\n",
        "    marketing_y_diseño = [\n",
        "        \"Digital Marketing Manager\",\n",
        "    \"Product Designer\",\n",
        "    \"Senior Product Marketing Manager\",\n",
        "    \"Marketing Manager\",\n",
        "    \"Graphic Designer\",\n",
        "    \"Content Marketing Manager\",\n",
        "    \"Marketing Specialist\",\n",
        "    \"Marketing Coordinator\",\n",
        "    \"Social Media Manager\",\n",
        "    \"Social Media Specialist\",\n",
        "    \"Front end Developer\",\n",
        "    \"Back end Developer\",\n",
        "    \"Full Stack Engineer\",\n",
        "    \"Creative Director\",\n",
        "    \"Digital Content Producer\",\n",
        "    \"Copywriter\",\n",
        "    \"Digital Marketing Specialist\",\n",
        "    \"Junior Social Media Manager\",\n",
        "    \"Junior Social Media Specialist\",\n",
        "    \"Junior Advertising Coordinator\",\n",
        "    \"Junior Marketing Coordinator\",\n",
        "    \"Junior Marketing Specialist\",\n",
        "    \"Junior Marketing Analyst\",\n",
        "    \"Junior Copywriter\",\n",
        "    \"Junior Research Scientist\"\n",
        "    ]\n",
        "    Tecnología_y_Desarrollo = [\n",
        "       \"Senior Software Architect\",\n",
        "    \"Junior Software Engineer\",\n",
        "    \"Senior IT Consultant\",\n",
        "    \"Network Engineer\",\n",
        "    \"Junior Developer\",\n",
        "    \"UX Designer\",\n",
        "    \"Web Developer\",\n",
        "    \"Front end Developer\",\n",
        "    \"Back end Developer\",\n",
        "    \"Software Manager\",\n",
        "    \"Developer\",\n",
        "    \"Technical Writer\",\n",
        "    \"Technical Recruiter\",\n",
        "    \"Software Engineer Manager\",\n",
        "    \"IT Manager\",\n",
        "    \"Data Scientist\",\n",
        "    \"Data Analyst\",\n",
        "    \"Full Stack Engineer\",\n",
        "    \"Software Developer\",\n",
        "    \"Senior Software Engineer\",\n",
        "    \"Senior Data Analyst\",\n",
        "    \"Senior Data Scientist\",\n",
        "    \"Junior Data Scientist\",\n",
        "    \"Software Project Manager\",\n",
        "    \"Senior IT Project Manager\"\n",
        "    ]\n",
        "    recursos_humanos_finanzas = [\n",
        "        \"Financial Manager\",\n",
        "    \"Financial Analyst\",\n",
        "    \"Junior Financial Advisor\",\n",
        "    \"Senior Financial Advisor\",\n",
        "    \"HR Generalist\",\n",
        "    \"Senior HR Manager\",\n",
        "    \"Junior HR Coordinator\",\n",
        "    \"Human Resources Coordinator\",\n",
        "    \"Junior HR Generalist\",\n",
        "    \"Human Resources Director\",\n",
        "    \"Senior HR Generalist\",\n",
        "    \"Senior HR Specialist\",\n",
        "    \"HR Manager\",\n",
        "    \"Director of Human Capital\",\n",
        "    \"Director of HR\",\n",
        "    \"VP of Finance\",\n",
        "    \"CEO\",\n",
        "    \"HR Generalist\"]\n",
        "\n",
        "    ventas_y_desarrollo_comercial= [\n",
        "    \"Senior Sales Manager\",\n",
        "    \"Sales Executive\",\n",
        "    \"Sales Associate\",\n",
        "    \"Sales Representative\",\n",
        "    \"Sales Director\",\n",
        "    \"Sales Manager\",\n",
        "    \"Senior Sales Representative\",\n",
        "    \"Sales Operations Manager\",\n",
        "    \"Account Manager\",\n",
        "    \"Senior Account Executive\",\n",
        "    \"Senior Account Manager\",\n",
        "    \"Accountant\",\n",
        "    \"Customer Service Manager\",\n",
        "    \"Customer Service Representative\",\n",
        "    \"Customer Success Manager\",\n",
        "    \"Customer Service Rep\",\n",
        "    \"Customer Success Rep\",\n",
        "    \"Account Manager\"\n",
        "    ]\n",
        "    Operaciones_y_Logistica = [\n",
        "      \"Operations Analyst\",\n",
        "    \"Operations Manager\",\n",
        "    \"Operations Director\",\n",
        "    \"Operations Analyst\",\n",
        "    \"Operations Director\",\n",
        "    \"Delivery Driver\",\n",
        "    \"Office Manager\",\n",
        "    \"Junior Operations Analyst\",\n",
        "    \"Junior Operations Manager\",\n",
        "    \"Junior Operations Coordinator\",\n",
        "    \"Junior Project Manager\",\n",
        "    \"Senior Operations Coordinator\",\n",
        "    \"Senior Operations Analyst\",\n",
        "    \"Senior Operations Manager\",\n",
        "    \"Supply Chain Analyst\",\n",
        "    \"Supply Chain Manager\"\n",
        "\n",
        "    ]\n",
        "\n",
        "\n",
        "\n",
        "    Investigacion_y_Desarrollo_Cientifico= [\n",
        "    \"Senior Project Engineer\",\n",
        "    \"Senior Project Manager\",\n",
        "    \"Project Engineer\",\n",
        "    \"Project Manager\",\n",
        "    \"Project Coordinator\",\n",
        "    \"Senior Project Coordinator\",\n",
        "    \"Strategy Consultant\",\n",
        "    \"Senior Consultant\"\n",
        "    ]\n",
        "\n",
        "\n",
        "    Administracion_y_Gerencia= [\n",
        "    \"Director\",\n",
        "    \"CEO\",\n",
        "    \"Director of Finance\",\n",
        "    \"Director of Operations\",\n",
        "    \"Director of Sales\",\n",
        "    \"Director of Marketing\",\n",
        "    \"Director of Human Resources\",\n",
        "    \"Director of Product Management\",\n",
        "    \"Director of Business Development\",\n",
        "    \"Director of Data Science\",\n",
        "    \"Director of Human Resources\",\n",
        "    \"Director of Sales and Marketing\",\n",
        "    \"Senior Manager\",\n",
        "    \"Administrative Assistant\"\n",
        "\n",
        "    ]\n",
        "\n",
        "    if job_title in marketing_y_diseño:\n",
        "        return 'marketing_y_diseño'\n",
        "    elif job_title in Tecnología_y_Desarrollo:\n",
        "        return 'Tecnología_y_Desarrollo'\n",
        "    elif job_title in recursos_humanos_finanzas:\n",
        "        return 'recursos_humanos_finanzas'\n",
        "    elif job_title in ventas_y_desarrollo_comercial:\n",
        "        return 'ventas_y_desarrollo_comercial'\n",
        "    elif job_title in Operaciones_y_Logistica:\n",
        "        return 'Operaciones_y_Logistica'\n",
        "    elif job_title in Investigacion_y_Desarrollo_Cientifico:\n",
        "        return 'Investigacion_y_Desarrollo_Cientifico'\n",
        "    elif job_title in Investigacion_y_Desarrollo_Cientifico:\n",
        "        return 'Ventas'\n",
        "    elif job_title in Administracion_y_Gerencia:\n",
        "        return 'Administracion_y_Gerencia'\n",
        "    else:\n",
        "        return 'Otros'\n",
        "\n",
        "# Crear una función de mapeo UDF\n",
        "map_job_udf = spark.udf.register(\"map_job_to_group\", map_job_to_group)\n",
        "\n",
        "# Aplicar la función de mapeo y crear una nueva columna \"Group\"\n",
        "dfs = dfs.withColumn(\"Group\", map_job_udf(col(\"Job Title\")))\n",
        "\n",
        "# Mostrar el resultado\n",
        "dfs.show(truncate=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "3YL3KNld1tkg",
        "outputId": "ef0925b1-3e67-44d7-9ef5-2ac511a9e7f5"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+------+-----------------+-------------------------+-------------------+--------+-------------------------------------+\n",
            "|Age |Gender|Education Level  |Job Title                |Years of Experience|Salary  |Group                                |\n",
            "+----+------+-----------------+-------------------------+-------------------+--------+-------------------------------------+\n",
            "|32.0|Male  |Bachelor's       |Product Manager          |7.0                |170000.0|Otros                                |\n",
            "|47.0|Male  |Master's         |Director of Operations   |19.0               |170000.0|Administracion_y_Gerencia            |\n",
            "|26.0|Female|Master's Degree  |Back end Developer       |2.0                |70000.0 |marketing_y_diseño                   |\n",
            "|47.0|Male  |PhD              |Software Engineer Manager|14.0               |175000.0|Tecnología_y_Desarrollo              |\n",
            "|34.0|Male  |Bachelor's Degree|Front end Developer      |5.0                |95000.0 |marketing_y_diseño                   |\n",
            "|36.0|Male  |Bachelor's Degree|Front end Developer      |12.0               |137878.0|marketing_y_diseño                   |\n",
            "|36.0|Male  |Bachelor's       |Sales Manager            |9.0                |95000.0 |ventas_y_desarrollo_comercial        |\n",
            "|29.0|Female|Bachelor's       |Junior Recruiter         |3.0                |45000.0 |Otros                                |\n",
            "|37.0|Male  |Master's Degree  |Senior Project Engineer  |9.0                |145000.0|Investigacion_y_Desarrollo_Cientifico|\n",
            "|28.0|Female|Master's Degree  |Senior Software Engineer |5.0                |99747.0 |Tecnología_y_Desarrollo              |\n",
            "|34.0|Female|Master's         |UX Designer              |5.0                |80000.0 |Tecnología_y_Desarrollo              |\n",
            "|30.0|Male  |Bachelor's       |Network Engineer         |3.0                |60000.0 |Tecnología_y_Desarrollo              |\n",
            "|49.0|Male  |PhD              |Senior Project Engineer  |15.0               |185000.0|Investigacion_y_Desarrollo_Cientifico|\n",
            "|47.0|Male  |PhD              |Senior Project Engineer  |16.0               |190000.0|Investigacion_y_Desarrollo_Cientifico|\n",
            "|28.0|Female|Bachelor's Degree|Software Engineer        |4.0                |70000.0 |Otros                                |\n",
            "|24.0|Male  |Bachelor's Degree|Back end Developer       |1.0                |55000.0 |marketing_y_diseño                   |\n",
            "|30.0|Male  |Bachelor's Degree|Back end Developer       |4.0                |95000.0 |marketing_y_diseño                   |\n",
            "|35.0|Female|Master's Degree  |Full Stack Engineer      |10.0               |152039.0|marketing_y_diseño                   |\n",
            "|26.0|Male  |Master's Degree  |Full Stack Engineer      |3.0                |68472.0 |marketing_y_diseño                   |\n",
            "|44.0|Female|Master's Degree  |Senior Project Engineer  |12.0               |170000.0|Investigacion_y_Desarrollo_Cientifico|\n",
            "+----+------+-----------------+-------------------------+-------------------+--------+-------------------------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "string_indexer = StringIndexer(inputCol=\"Gender\", outputCol=\"Gender_Index\")\n",
        "# Ajustar y transformar el DataFrame\n",
        "dfs = string_indexer.fit(dfs).transform(dfs)\n",
        "# Reemplazar la columna original con la nueva columna de índices\n",
        "\n",
        "\n",
        "indxEL = StringIndexer(inputCol=\"Education Level\", outputCol=\"Education_indexed\")\n",
        "dfs = indxEL.fit(dfs).transform(dfs)\n",
        "\n",
        "\n",
        "group_indexer = StringIndexer(inputCol=\"Group\", outputCol=\"Group_Indexed\", handleInvalid=\"keep\")\n",
        "\n",
        "# Aplicar el StringIndexer al DataFrame resultante\n",
        "dfs = group_indexer.fit(dfs).transform(dfs)"
      ],
      "metadata": {
        "id": "yrwWrEXGpEsv"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Educacion_ori = dfs.select(\"Education Level\").distinct().collect()\n",
        "Educacion_num = dfs.select(\"Education_indexed\").distinct().collect()\n",
        "print(\"Ahora con respecto a la Indexación de las Variables de los niveles de Educación:\")\n",
        "for original, indexed in zip(Educacion_ori, Educacion_num):\n",
        "    print(f\"Original: {original[0]}, Indexed: {indexed[0]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "LSINiL8Asg_c",
        "outputId": "0f2aa780-4b6b-4188-ef18-705be9efab7d"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ahora con respecto a la Indexación de las Variables de los niveles de Educación:\n",
            "Original: High School, Indexed: 0.0\n",
            "Original: Master's Degree, Indexed: 7.0\n",
            "Original: Bachelor's Degree, Indexed: 1.0\n",
            "Original: PhD, Indexed: 4.0\n",
            "Original: NaN, Indexed: 3.0\n",
            "Original: Bachelor's, Indexed: 2.0\n",
            "Original: Master's, Indexed: 6.0\n",
            "Original: phD, Indexed: 5.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Group_ori = dfs.select(\"Group\").distinct().collect()\n",
        "Group_num = dfs.select(\"Group_Indexed\").distinct().collect()\n",
        "print(\"Ahora con respecto a la Indexación de las Variables de las agrupaciones de todas las profesiones:\")\n",
        "for original, indexed in zip(Group_ori, Group_num):\n",
        "    print(f\"Original: {original[0]}, Indexed: {indexed[0]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Xt_dRIxryrGJ",
        "outputId": "8c0c5a10-44d1-44b8-c5d4-c3af72a0c9f5"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ahora con respecto a la Indexación de las Variables de las agrupaciones de todas las profesiones:\n",
            "Original: Operaciones_y_Logistica, Indexed: 0.0\n",
            "Original: Administracion_y_Gerencia, Indexed: 7.0\n",
            "Original: Investigacion_y_Desarrollo_Cientifico, Indexed: 1.0\n",
            "Original: marketing_y_diseño, Indexed: 4.0\n",
            "Original: recursos_humanos_finanzas, Indexed: 3.0\n",
            "Original: ventas_y_desarrollo_comercial, Indexed: 2.0\n",
            "Original: Tecnología_y_Desarrollo, Indexed: 6.0\n",
            "Original: Otros, Indexed: 5.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_describe = dfs.describe().toPandas() # Para poder utilizar esta funcipon de python haciedno uso de spark se pasa este a pandas y se transpone\n",
        "df_describe.T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "SwE_tou3h7M6",
        "outputId": "60bde47f-0d35-4a60-960c-8859f3e694a7"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         0                    1                   2  \\\n",
              "summary              count                 mean              stddev   \n",
              "Age                   1788   35.135346756152124   8.213002578316493   \n",
              "Gender                1788                 None                None   \n",
              "Education Level       1788                  NaN                None   \n",
              "Job Title             1788                 None                None   \n",
              "Years of Experience   1788    9.154921700223714   6.843198915598923   \n",
              "Salary                1788   113177.28579418345   51583.04051448558   \n",
              "Group                 1788                 None                None   \n",
              "Gender_Index          1788  0.46308724832214765  0.5065678087065124   \n",
              "Education_indexed     1788    1.657158836689038    1.50374246187857   \n",
              "Group_Indexed         1788   1.8870246085011186  1.8162943037171309   \n",
              "\n",
              "                                             3                              4  \n",
              "summary                                    min                            max  \n",
              "Age                                       21.0                           62.0  \n",
              "Gender                                  Female                          Other  \n",
              "Education Level                     Bachelor's                            phD  \n",
              "Job Title                      Account Manager                  Web Developer  \n",
              "Years of Experience                        0.0                           34.0  \n",
              "Salary                                   350.0                       250000.0  \n",
              "Group                Administracion_y_Gerencia  ventas_y_desarrollo_comercial  \n",
              "Gender_Index                               0.0                            2.0  \n",
              "Education_indexed                          0.0                            7.0  \n",
              "Group_Indexed                              0.0                            7.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-abd73b7d-c8db-4055-851b-8dba380ae544\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>summary</th>\n",
              "      <td>count</td>\n",
              "      <td>mean</td>\n",
              "      <td>stddev</td>\n",
              "      <td>min</td>\n",
              "      <td>max</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1788</td>\n",
              "      <td>35.135346756152124</td>\n",
              "      <td>8.213002578316493</td>\n",
              "      <td>21.0</td>\n",
              "      <td>62.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>1788</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>Female</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education Level</th>\n",
              "      <td>1788</td>\n",
              "      <td>NaN</td>\n",
              "      <td>None</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>phD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Job Title</th>\n",
              "      <td>1788</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>Account Manager</td>\n",
              "      <td>Web Developer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Years of Experience</th>\n",
              "      <td>1788</td>\n",
              "      <td>9.154921700223714</td>\n",
              "      <td>6.843198915598923</td>\n",
              "      <td>0.0</td>\n",
              "      <td>34.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Salary</th>\n",
              "      <td>1788</td>\n",
              "      <td>113177.28579418345</td>\n",
              "      <td>51583.04051448558</td>\n",
              "      <td>350.0</td>\n",
              "      <td>250000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Group</th>\n",
              "      <td>1788</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>Administracion_y_Gerencia</td>\n",
              "      <td>ventas_y_desarrollo_comercial</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender_Index</th>\n",
              "      <td>1788</td>\n",
              "      <td>0.46308724832214765</td>\n",
              "      <td>0.5065678087065124</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education_indexed</th>\n",
              "      <td>1788</td>\n",
              "      <td>1.657158836689038</td>\n",
              "      <td>1.50374246187857</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Group_Indexed</th>\n",
              "      <td>1788</td>\n",
              "      <td>1.8870246085011186</td>\n",
              "      <td>1.8162943037171309</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abd73b7d-c8db-4055-851b-8dba380ae544')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-abd73b7d-c8db-4055-851b-8dba380ae544 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-abd73b7d-c8db-4055-851b-8dba380ae544');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09ea3d08-e526-4f83-9ae4-a0d9806ebe05\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09ea3d08-e526-4f83-9ae4-a0d9806ebe05')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09ea3d08-e526-4f83-9ae4-a0d9806ebe05 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Podemos rectificar que quedó este dataset con 1792 registros;"
      ],
      "metadata": {
        "id": "FCsdvTcCjtgp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "columns = [\"Age\", \"Gender\", \"Education Level\", \"Job Title\", \"Years of Experience\", \"Salary\"]\n",
        "\n",
        "\n",
        "# Convertir DataFrame de PySpark a DataFrame de pandas\n",
        "df_pandas = dfs.toPandas()\n",
        "\n",
        "# Crear el mapa de calor\n",
        "plt.figure(figsize=(10, 10))\n",
        "sns.heatmap(df_pandas[[\"Age\", \"Years of Experience\", \"Salary\", \"Gender_Index\", \"Education_indexed\"]].corr(),\n",
        "            vmin=-1, vmax=1, annot=True, annot_kws={'size': 8}).set(title=\"Mapa relacional entre las características de cada persona\")\n",
        "\n",
        "# Mostrar el mapa de calor\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 853
        },
        "id": "L4I1mDY5x_RR",
        "outputId": "4c73e441-bc30-417e-df90-e742f3f42c63"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Preprocesamiento de datos para el entrenamiento***"
      ],
      "metadata": {
        "id": "JownzNh9ukNu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primeramente, se debe seleccionar una variable objetivo, en este caso la más representativa sería el tipo de trabajo"
      ],
      "metadata": {
        "id": "SJHu5latu5Cx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import RocCurveDisplay\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from pyspark.sql import SparkSession\n",
        "from pyspark.ml.feature import VectorAssembler"
      ],
      "metadata": {
        "id": "W3pxTRERyhd3"
      },
      "execution_count": 178,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se realiza la separación del dataframe de entrenamiento y de prueba:"
      ],
      "metadata": {
        "id": "8jBHiIAHLvil"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_pandas = dfs.toPandas()\n",
        "\n",
        "# Seleccionar las columnas relevantes\n",
        "#[[\"Age\", \"Years of Experience\", \"Gender_Index\", \"Education_indexed\", \"Group_Indexed\"]]\n",
        "X = df_pandas[[\"Age\", \"Years of Experience\", \"Gender_Index\", \"Education_indexed\", \"Salary\"]]\n",
        "y = df_pandas[\"Group_Indexed\"]\n",
        "\n",
        "# Dividir los datos en conjunto de entrenamiento y prueba\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.20, random_state=42)"
      ],
      "metadata": {
        "id": "I-nJRyBeRDfG"
      },
      "execution_count": 170,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Modelo Random Forest***"
      ],
      "metadata": {
        "id": "Xyn0DV6pL9CV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model01RF=RandomForestClassifier(n_estimators=200)\n",
        "model01RF.fit(Xtrain, ytrain)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "r7uivXMxnx2c",
        "outputId": "15b27db2-bb15-48ba-b3ae-cb4a4cee3e7e"
      },
      "execution_count": 171,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(n_estimators=200)"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=200)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=200)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred=model01RF.predict(Xtest)\n",
        "print(classification_report(ytest,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q0RfnZdQCVqa",
        "outputId": "fc989c25-5e77-4cd7-b300-b85139e9165c"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0       0.55      0.54      0.55        95\n",
            "         1.0       0.59      0.63      0.61        75\n",
            "         2.0       0.59      0.65      0.62        92\n",
            "         3.0       0.39      0.38      0.39        29\n",
            "         4.0       0.50      0.21      0.30        28\n",
            "         5.0       0.47      0.38      0.42        21\n",
            "         6.0       0.29      0.44      0.35         9\n",
            "         7.0       0.14      0.22      0.17         9\n",
            "\n",
            "    accuracy                           0.53       358\n",
            "   macro avg       0.44      0.43      0.43       358\n",
            "weighted avg       0.53      0.53      0.52       358\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm=confusion_matrix(ytest,y_pred)\n",
        "print(cm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oWYhgfZ0BwMQ",
        "outputId": "f596c8cf-caa0-484a-a1c1-6c62468d28cb"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[51  8 16 13  1  5  0  1]\n",
            " [14 47  7  1  4  0  1  1]\n",
            " [ 9 10 60  1  0  3  3  6]\n",
            " [ 5  1  6 11  1  1  2  2]\n",
            " [ 8 10  4  0  6  0  0  0]\n",
            " [ 1  1  5  1  0  8  3  2]\n",
            " [ 1  3  0  1  0  0  4  0]\n",
            " [ 3  0  3  0  0  0  1  2]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Juntamos ambos análisis para presentar una ayuda para encontrar una relación visual entre ambos objetos:\n",
        "print(classification_report(ytest, y_pred))\n",
        "ConfusionMatrixDisplay.from_estimator(\n",
        "    model01RF, Xtest, ytest, xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 764
        },
        "id": "5hflt1FeBqYh",
        "outputId": "60172314-9a13-4b13-ff53-9396b1f56509"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0       0.55      0.54      0.55        95\n",
            "         1.0       0.59      0.63      0.61        75\n",
            "         2.0       0.59      0.65      0.62        92\n",
            "         3.0       0.39      0.38      0.39        29\n",
            "         4.0       0.50      0.21      0.30        28\n",
            "         5.0       0.47      0.38      0.42        21\n",
            "         6.0       0.29      0.44      0.35         9\n",
            "         7.0       0.14      0.22      0.17         9\n",
            "\n",
            "    accuracy                           0.53       358\n",
            "   macro avg       0.44      0.43      0.43       358\n",
            "weighted avg       0.53      0.53      0.52       358\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Modelo SVM(supper vector Machine)***"
      ],
      "metadata": {
        "id": "AOx_CjHjMBVO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "#from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "#Para ML con algorítmo SGD:\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "\n",
        "from sklearn.pipeline import make_pipeline"
      ],
      "metadata": {
        "id": "TpnaMm_bCc6R"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model02SVM = make_pipeline(StandardScaler(), SVC(gamma='auto'))\n",
        "\n",
        "# Entrenar el modelo\n",
        "model02SVM.fit(Xtrain, ytrain)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "YgqfPGS4Jw-L",
        "outputId": "9bc57caf-1799-4e75-b40e-2a87500ab615"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
              "                ('svc', SVC(gamma='auto'))])"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
              "                (&#x27;svc&#x27;, SVC(gamma=&#x27;auto&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
              "                (&#x27;svc&#x27;, SVC(gamma=&#x27;auto&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(gamma=&#x27;auto&#x27;)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Hacer predicciones\n",
        "predictions_svm = model02SVM.predict(Xtest)\n",
        "\n",
        "# Evaluar el rendimiento del modelo (puedes ajustar según tu tarea específica)\n",
        "accuracy_svm = (predictions_svm == ytest).mean()\n",
        "\n",
        "# Mostrar el rendimiento del modelo\n",
        "print(f\"Exactitud del modelo SVM: {accuracy_svm}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unEHxoHBKwB1",
        "outputId": "9ad2c1cb-8a0d-459e-de19-9559907c4a92"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Exactitud del modelo SVM: 0.4581005586592179\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(ytest, y_pred))\n",
        "ConfusionMatrixDisplay.from_estimator(\n",
        "    model02SVM, Xtest, ytest,  xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 764
        },
        "id": "wBAJwBWWJzA1",
        "outputId": "e024ecfe-e09a-4db5-cfd4-43e9fa0c7d9f"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0       0.55      0.54      0.55        95\n",
            "         1.0       0.59      0.63      0.61        75\n",
            "         2.0       0.59      0.65      0.62        92\n",
            "         3.0       0.39      0.38      0.39        29\n",
            "         4.0       0.50      0.21      0.30        28\n",
            "         5.0       0.47      0.38      0.42        21\n",
            "         6.0       0.29      0.44      0.35         9\n",
            "         7.0       0.14      0.22      0.17         9\n",
            "\n",
            "    accuracy                           0.53       358\n",
            "   macro avg       0.44      0.43      0.43       358\n",
            "weighted avg       0.53      0.53      0.52       358\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Modelo NN(Neuronal Network)***"
      ],
      "metadata": {
        "id": "RcJPgmhpMJXI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neural_network import MLPClassifier\n",
        "model_nn = make_pipeline(StandardScaler(), MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000))\n",
        "\n",
        "# Entrenar el modelo\n",
        "model_nn.fit(Xtrain, ytrain)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "pbg26slzLE8I",
        "outputId": "2c7f6096-0c18-4d87-8415-ced7b9065aae"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
              "                ('mlpclassifier',\n",
              "                 MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000))])"
            ],
            "text/html": [
              "<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
              "                (&#x27;mlpclassifier&#x27;,\n",
              "                 MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
              "                (&#x27;mlpclassifier&#x27;,\n",
              "                 MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions_nn = model_nn.predict(Xtest)\n",
        "\n",
        "# Evaluar el rendimiento del modelo (puedes ajustar según tu tarea específica)\n",
        "accuracy_nn = (predictions_nn == ytest).mean()\n",
        "\n",
        "# Mostrar el rendimiento del modelo\n",
        "print(f\"Exactitud del modelo de Red Neuronal: {accuracy_nn}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "42cG_C4aLRpH",
        "outputId": "4e53e838-fa45-477c-ac89-aef72ab27ed0"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Exactitud del modelo de Red Neuronal: 0.4720670391061452\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(ytest, y_pred))\n",
        "ConfusionMatrixDisplay.from_estimator(\n",
        "    model_nn, Xtest, ytest,  xticks_rotation=\"vertical\"\n",
        ")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 764
        },
        "id": "JXfBgwI0LgAt",
        "outputId": "ec46dcb8-d44d-4c1f-ba48-59b433d01213"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0       0.55      0.54      0.55        95\n",
            "         1.0       0.59      0.63      0.61        75\n",
            "         2.0       0.59      0.65      0.62        92\n",
            "         3.0       0.39      0.38      0.39        29\n",
            "         4.0       0.50      0.21      0.30        28\n",
            "         5.0       0.47      0.38      0.42        21\n",
            "         6.0       0.29      0.44      0.35         9\n",
            "         7.0       0.14      0.22      0.17         9\n",
            "\n",
            "    accuracy                           0.53       358\n",
            "   macro avg       0.44      0.43      0.43       358\n",
            "weighted avg       0.53      0.53      0.52       358\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}